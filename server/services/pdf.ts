import * as fs from 'fs';
import * as path from 'path';

interface ReportContent {
  title: string;
  summary: string;
  sections: Array<{
    title: string;
    content: string;
    items?: string[];
  }>;
  recommendations?: string[];
  testScenarios?: string[];
}

class PDFService {
  private ensureDirectoryExists(dirPath: string): void {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }
  }

  async generatePDF(reportId: string, content: ReportContent, audienceType: string): Promise<string> {
    // For now, we'll generate a simple HTML file that can be converted to PDF
    // In a production environment, you'd use libraries like puppeteer or jsPDF
    const reportsDir = path.join(process.cwd(), 'reports');
    this.ensureDirectoryExists(reportsDir);

    const filename = `${reportId}-${audienceType}.html`;
    const filepath = path.join(reportsDir, filename);

    const html = this.generateHTMLReport(content, audienceType);
    
    fs.writeFileSync(filepath, html, 'utf8');
    
    return filepath;
  }

  private generateHTMLReport(content: ReportContent, audienceType: string): string {
    const audienceTypeDisplay = {
      pm: 'Project Manager',
      qa: 'Quality Assurance',
      client: 'Client'
    }[audienceType] || audienceType;

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${content.title}</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            border-bottom: 3px solid #4F46E5;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #4F46E5;
            margin: 0;
            font-size: 28px;
        }
        .audience-badge {
            background: #4F46E5;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            display: inline-block;
            margin-top: 10px;
        }
        .summary {
            background: #F8FAFC;
            padding: 20px;
            border-left: 4px solid #4F46E5;
            margin-bottom: 30px;
        }
        .section {
            margin-bottom: 25px;
        }
        .section h2 {
            color: #1E293B;
            border-bottom: 2px solid #E2E8F0;
            padding-bottom: 5px;
        }
        .test-scenarios {
            background: #FEF3C7;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #F59E0B;
        }
        .recommendations {
            background: #ECFDF5;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #10B981;
        }
        ul {
            padding-left: 20px;
        }
        li {
            margin-bottom: 8px;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #E2E8F0;
            text-align: center;
            color: #6B7280;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>${content.title}</h1>
        <span class="audience-badge">Report for ${audienceTypeDisplay}</span>
    </div>

    <div class="summary">
        <h2>Executive Summary</h2>
        <p>${content.summary}</p>
    </div>

    ${content.sections.map(section => `
        <div class="section">
            <h2>${section.title}</h2>
            <p>${section.content}</p>
            ${section.items ? `
                <ul>
                    ${section.items.map(item => `<li>${item}</li>`).join('')}
                </ul>
            ` : ''}
        </div>
    `).join('')}

    ${content.testScenarios ? `
        <div class="test-scenarios">
            <h2>ðŸ“‹ Recommended Test Scenarios</h2>
            <ul>
                ${content.testScenarios.map(scenario => `<li>${scenario}</li>`).join('')}
            </ul>
        </div>
    ` : ''}

    ${content.recommendations ? `
        <div class="recommendations">
            <h2>ðŸ’¡ Recommendations</h2>
            <ul>
                ${content.recommendations.map(rec => `<li>${rec}</li>`).join('')}
            </ul>
        </div>
    ` : ''}

    <div class="footer">
        <p>Generated by PR Insight â€¢ ${new Date().toLocaleDateString()}</p>
    </div>
</body>
</html>`;
  }
}

export const pdfService = new PDFService();
